<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
	
	<!-- 加载Handler（非注解映射调用） -->
	<bean id="itemsController1" name="/queryItems_test.action" class="com.lanjerry.ssm.controller.ItemsController1"></bean>
	<!-- 加载另一个Handler（非注解映射调用） -->
	<bean id="itemsController2" class="com.lanjerry.ssm.controller.ItemsController2"></bean>
	<!-- 加载另一个Handler（注解映射调用，单个配置） -->
	<!-- <bean class="com.lanjerry.ssm.controller.ItemsController3"></bean> -->
	<!-- 批量加载Handler（注解映射调用，实际开发中使用）  -->
	<context:component-scan base-package="com.lanjerry.ssm.controller"></context:component-scan>
		
	<!-- 处理器映射器，所有的映射器都实现了HandlerMapping接口，BeanNameUrlHandlerMapping和SimpleUrlHandlerMapping映射器查看源代码可以找到 -->
	<!-- 将bean的name作为url进行查找,需要在配置Handler时指定beanname(就是url) -->
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />
	
	<!-- SimpleUrlHandlerMapping映射器是BeanNameUrlHandlerMapping映射器的加强版，它可以将url和处理器bean的id进行统一映射配置 -->
	<!--简单url映射  -->
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				<!-- 对itemsController1进行url映射，url是/queryItems1.action -->
				<prop key="/queryItems1.action">itemsController1</prop>
				<prop key="/queryItems2.action">itemsController1</prop>
				<prop key="/queryItems3.action">itemsController2</prop>
			</props>
		</property>
	</bean>
	
	<!-- 处理器适配器 -->
	<!-- 所有的适配器都实现HandlerAdapter接口，SimpleControllerHandlerAdapter适配器要求编写的Handler实现Controller接口 -->
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
	
	<!-- HttpRequestHandlerAdapte适配器要求编写的 Handler实现HttpRequestHandler接口-->
	<!-- HttpRequestHandlerAdapte适配器可以使用里面的request参数，设置响应的数据格式，比如响应json格式，这是Controller做不到的 -->
	<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />
	
	<!-- 注解映射器 -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
	
	<!-- 注解适配器 -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />
	
	<!-- 使用mvc:annotation-driven代替上面的注解映射器和注解适配器配置（实际开发中使用） -->
	<!-- mvc:annotation-driven默认加载很多的参数绑定方法，比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter -->
	<!-- <mvc:annotation-driven></mvc:annotation-driven> -->
	
	<!-- 视图解析器 -->
	<!-- 解析jsp视图，默认使用jstl标签,classpath下的得有jstl的包 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<!-- 配置后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>	
</beans>