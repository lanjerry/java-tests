<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
注意：使用mapper代理方法开发，namespace有特殊重要的作用
 -->
<mapper namespace="test">
	<!-- 
	根据id查询用户表信息
	parameterType：指定输入参数的类型，这里指定int型
	resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象
	#{}表示一个占位符
	#{id}：其中id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或其他名称
	 -->
	<select id="findUserById" parameterType="java.lang.Integer" resultType="com.lanjerry.mybatis.po.User">
		SELECT * FROM user WHERE id=#{id}
	</select>
	
	<!-- 
	根据用户名称模糊查询用户信息，可能返回多条
	resultType：指定就是单条记录所映射的java对象类型
	${}：表示拼接sql，将接收到参数的内容不加任何修饰拼接在sql中
	使用${}拼接sql,引起sql注入
	${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能用value
	 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="com.lanjerry.mybatis.po.User">
		SELECT * FROM user WHERE username LIKE '%${value}%'
	</select>
	
	<!-- 添加用户 -->
	<insert id="insertUser" parameterType="com.lanjerry.mybatis.po.User">
		<!--
		将插入数据的主键返回，返回user对象中
		SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用于自增主键
		keyProperty：将查询到的主键值设置到 parameterType指定对象的哪个属性
		order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
		resultType：指定SELECT LAST_INSERT_ID()的结果类型
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer" >
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into user(username,birthday,sex,address)value(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<!-- 删除用户，根据id删除用户，需要输入id值 -->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete>
	
	<!-- 更新用户，根据id更新用户，需要传入用户的更新信息 -->
	<update id="updateUser">
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
	</update>
</mapper>